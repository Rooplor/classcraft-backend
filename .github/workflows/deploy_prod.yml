name: deploy-prod Pipeline

on: workflow_dispatch

jobs:
  build-test:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    env:
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      STAFF_EMAIL: ${{ secrets.STAFF_EMAIL }}
      STAFF_USERNAME: ${{ secrets.STAFF_USERNAME }}

    steps:
      - name: checkout-code
        uses: actions/checkout@v3

      - name: setup-java21
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '21'

      - name: init mongodb
        run: docker compose up -d

      - name: install-dependency
        run: ./mvnw install

      - name: build
        run: ./mvnw package

      - name: ktlint
        run: ./mvnw ktlint:check

      - name: unit-test
        run:  ./mvnw test

      - name: upload-build-files
        uses: actions/upload-artifact@v3
        with:
          name: my-app-jar
          path: target/*.jar

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-test

    env:
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      STAFF_EMAIL: ${{ secrets.STAFF_EMAIL }}
      STAFF_USERNAME: ${{ secrets.STAFF_USERNAME }}
      STAFF_APPROVE_URL: ${{ secrets.STAFF_APPROVE_URL }}
      STAFF_REJECT_URL: ${{ secrets.STAFF_REJECT_URL }}

    steps:
      - name: checkout-code
        uses: actions/checkout@v3

      - name: dowload-build-files
        uses: actions/download-artifact@v3
        with:
          name: my-app-jar
          path: ./build

      - name: install-ssh-client
        run: sudo apt-get install -y openssh-client

      - name: install-openVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: connect-to-server
        uses: "kota65535/github-openvpn-connect-action@v2"
        with:
          config_file: .github/workflows/sitst-client.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}

      - name: copy-build-files-to-server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -p 22 ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Copy build files to VM
        run: |
          sshpass -p "${{ secrets.REMOTE_PASSWORD }}" scp -P 22 build/*.jar ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/sysadmin/classCraftBackend/PROD

      - name: deploy-to-server
        env:
          REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
        run: |
          sshpass -p "$REMOTE_PASSWORD" ssh -t -o StrictHostKeyChecking=no -p 22 $REMOTE_USER@$REMOTE_HOST << 'EOF'          
            docker compose -p classcraft-prod -f compose.prod.yaml stop backend || true
            docker compose -p classcraft-prod -f compose.prod.yaml up -d --build backend
          EOF
